services:
  libretranslate:
    container_name: i18n_libretranslate
    image: libretranslate/libretranslate:latest
    restart: unless-stopped
    ports:
      - "${I18N_LT_PORT}:5000"
    expose:
      - ${I18N_LT_PORT}
    environment:
      ARGOS_DEBUG: ${I18N_LT_ARGOS_DEBUG}
      LT_DEBUG: ${I18N_LT_DEBUG}
      LT_PORT: ${I18N_LT_PORT}
      LT_LOAD_ONLY: ${I18N_LT_LOAD_ONLY}
      LT_DISABLE_WEB_UI: ${I18N_LT_DISABLE_WEB_UI}
      LT_METRICS: ${I18N_LT_METRICS}
      LT_UPDATE_MODELS: ${I18N_LT_UPDATE_MODELS}
    networks:
      - frg-network
    # command: --char-limit 1000 --req-limit 100 --batch-limit 100 --debug --load-only es,zh,ru --disable-web-ui --api-keys 
    # flags to include during production:
    # --ssl --metrics --require-api-key-origin null
    #environment:
    #  - LT_API_KEYS_DB_PATH=/app/db/api_keys.db # Same result as `db/api_keys.db` or `./db/api_keys.db`
    #volumes:
    #  - libretranslate_api_keys:/app/db
    # TODO: need viable healthcheck command
    #healthcheck:
    #  test: ["CMD-SHELL", 'curl -X POST "http://0.0.0.0:5000/translate" -H  "accept: application/json" -H  "Content-Type: application/x-www-form-urlencoded" -d "q=hello%20world&source=en&target=es&format=text" || exit 1']
    #  interval: 30s
    #  timeout: 10s
    #  retries: 1
    #  start_period: 0s

  #libretranslate_worker:
  #  container_name: libretranslate_worker
  #  build: './libretranslate_worker'
    # ports:
      # - 5001:5000
      # - 5672:5672

#volumes:
#  libretranslate_api_keys:

#networks:
#  default:
#    driver: bridge
#    external: true
#    name: food_guides

networks:
  frg-network:
    driver: bridge
